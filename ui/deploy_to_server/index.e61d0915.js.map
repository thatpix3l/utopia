{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA,SAAS,oCAAc,IAAY;IAC/B,OAAO,CAAC,qCAAqC,EAAE,KAAK,IAAI,CAAC;AAC7D;AAEO,SAAS,0CAAkC,IAAO,EAAE,OAAoB,EAAE,OAAyC,EAAE,IAA4B;IACpJ,IAAI,MAAM,IAAI;IACd,IAAI,IAAI,CAAC,QAAQ,oCAAc,OAAO;IACtC,IAAI,gBAAgB,CAAC,gBAAgB;IAErC,IAAI;QACA,IAAI,kBAAkB,GAAG;YACrB,IAAI,IAAI,CAAC,UAAU,IAAI,KAAK,IAAI,CAAC,MAAM,IAAI,KACvC,QAAQ,KAAK,KAAK,CAAC,IAAI,YAAY;QAI3C;QACA,IAAI,IAAI,CAAC,KAAK,SAAS,CAAC;IAC5B,EACA,OAAO,OAAO;QACV,IAAI,iBAAiB,OACjB,KAAK;aAGL,QAAQ,GAAG,CAAC,yBAAyB;IAE7C;AACJ;;;AD5BA,IAAI,+BAAS;AACb,CAAA,GAAA,6CAAA,EAAE;IACE,MAAM,YAAY,CAAA,GAAA,6CAAA,EAAkB;IACpC,MAAM,aAAa,CAAA,GAAA,6CAAA,EAAkB;IAErC,MAAM,qBAAqB,CAAA,GAAA,6CAAA,EAAoB;IAC/C,MAAM,qBAAqB,CAAA,GAAA,6CAAA,EAAoB;IAC/C,MAAM,sBAAsB,CAAA,GAAA,6CAAA,EAAoB;IAChD,MAAM,sBAAsB,CAAA,GAAA,6CAAA,EAAoB;IAChD,MAAM,uBAAuB,CAAA,GAAA,6CAAA,EAAoB;IACjD,MAAM,sBAAsB,CAAA,GAAA,6CAAA,EAAoB;IAEhD,MAAM,mBAAmB,CAAA,GAAA,6CAAA,EAAwB;IACjD,MAAM,oBAAoB,CAAA,GAAA,6CAAA,EAAwB;IAElD,oDAAoD;IACpD,CAAA,GAAA,6CAAA,EAAE,mBAAmB,EAAE,CAAC,SAAS;QAC7B,UAAU,WAAW,CAAC;QACtB,WAAW,QAAQ,CAAC;IACxB;IACA,CAAA,GAAA,6CAAA,EAAE,oBAAoB,EAAE,CAAC,SAAS;QAC9B,UAAU,QAAQ,CAAC;QACnB,WAAW,WAAW,CAAC;IAC3B;IAEA,CAAA,GAAA,6CAAA,EAAE,gBAAgB,EAAE,CAAC,SAAS;QAC1B,CAAA,GAAA,yCAAM,EAAE,SACJ;YACI,UAAU,mBAAmB,GAAG,MAAM;YACtC,UAAU,mBAAmB,GAAG,MAAM;QAC1C,GACA,CAAC;YACG,QAAQ,GAAG,CAAC;YACZ,+BAAS,SAAS,EAAE;YACpB,iBAAiB,IAAI,CAAC;QAC1B,GAAG,CAAC;YACA,QAAQ,GAAG,CAAC;YACZ,iBAAiB,IAAI,CAAC,MAAM,OAAO;QACvC;IACR;IAEA,CAAA,GAAA,6CAAA,EAAE,iBAAiB,EAAE,CAAC,SAAS;QAC3B,CAAA,GAAA,yCAAM,EAAE,YACJ;YACI,UAAU,oBAAoB,GAAG,MAAM;YACvC,UAAU,oBAAoB,GAAG,MAAM;YACvC,YAAY,qBAAqB,GAAG,MAAM;YAC1C,WAAW,oBAAoB,GAAG,MAAM;QAC5C,GACA,CAAC;YACG,QAAQ,GAAG,CAAC;YACZ,kBAAkB,IAAI,CAAC;QAC3B,GAAG,CAAC;YACA,QAAQ,GAAG,CAAC;YACZ,kBAAkB,IAAI,CAAC,MAAM,OAAO;QACxC;IACR;AACJ","sources":["src/scripts/Account.ts","src/scripts/API.ts"],"sourcesContent":["import $ from \"jquery\";\r\n\r\nimport { request } from \"./API\";\r\n\r\nlet userID = -1;\r\n$(() => {\r\n    const loginForm = $<HTMLDivElement>(\"#loginForm\");\r\n    const signupForm = $<HTMLDivElement>(\"#signupForm\");\r\n\r\n    const loginUsernameInput = $<HTMLInputElement>(\"#loginUsernameInput\");\r\n    const loginPasswordInput = $<HTMLInputElement>(\"#loginPasswordInput\");\r\n    const signupUsernameInput = $<HTMLInputElement>(\"#signupUsernameInput\");\r\n    const signupPasswordInput = $<HTMLInputElement>(\"#signupPasswordInput\");\r\n    const signupFirstNameInput = $<HTMLInputElement>(\"#signupFirstNameInput\");\r\n    const signupLastNameInput = $<HTMLInputElement>(\"#signupLastNameInput\");\r\n\r\n    const loginErrorHolder = $<HTMLParagraphElement>(\"#loginErrorHolder\");\r\n    const signupErrorHolder = $<HTMLParagraphElement>(\"#signupErrorHolder\");\r\n\r\n    // handle swapping between logging in and signing up\r\n    $(\"#loginTabButton\").on(\"click\", () => {\r\n        loginForm.removeClass(\"inactive\");\r\n        signupForm.addClass(\"inactive\");\r\n    });\r\n    $(\"#signupTabButton\").on(\"click\", () => {\r\n        loginForm.addClass(\"inactive\");\r\n        signupForm.removeClass(\"inactive\");\r\n    });\r\n\r\n    $(\"#loginButton\").on(\"click\", () => {\r\n        request(\"Login\",\r\n            {\r\n                username: loginUsernameInput.val() ?? \"\",\r\n                password: loginPasswordInput.val() ?? \"\",\r\n            },\r\n            (response) => {\r\n                console.log(response);\r\n                userID = response.id;\r\n                loginErrorHolder.text(\"\");\r\n            }, (error) => {\r\n                console.log(error);\r\n                loginErrorHolder.text(error.message);\r\n            });\r\n    });\r\n\r\n    $(\"#signUpButton\").on(\"click\", () => {\r\n        request(\"Register\",\r\n            {\r\n                username: signupUsernameInput.val() ?? \"\",\r\n                password: signupPasswordInput.val() ?? \"\",\r\n                name_first: signupFirstNameInput.val() ?? \"\",\r\n                name_last: signupLastNameInput.val() ?? \"\",\r\n            },\r\n            (response) => {\r\n                console.log(response);\r\n                signupErrorHolder.text(\"\");\r\n            }, (error) => {\r\n                console.log(error);\r\n                signupErrorHolder.text(error.message);\r\n            });\r\n    });\r\n});\r\n","import type { AssertSameKeys } from \"./types/Assertions\";\r\nimport { Payloads } from \"./types/Payloads\";\r\nimport { Responses } from \"./types/Responses\";\r\ntype VerifySameKeys = AssertSameKeys<Payloads, Responses>;\r\n\r\nfunction getRequestURL(type: string) {\r\n    return `http://utopia.cleanmango.com/LAMPAPI/${type}.php`;\r\n}\r\n\r\nexport function request<T extends keyof Payloads>(type: T, payload: Payloads[T], success: (response: Responses[T]) => void, fail: (error: Error) => void) {\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.open(\"POST\", getRequestURL(type), true);\r\n    xhr.setRequestHeader(\"Content-type\", \"application/json; charset=UTF-8\");\r\n\r\n    try {\r\n        xhr.onreadystatechange = function () {\r\n            if (this.readyState == 4 && this.status == 200) {\r\n                success(JSON.parse(xhr.responseText));\r\n                // TODO: will need to use this at some point\r\n                // window.location.href = \"color.html\";\r\n            }\r\n        };\r\n        xhr.send(JSON.stringify(payload));\r\n    }\r\n    catch (error) {\r\n        if (error instanceof Error) {\r\n            fail(error);\r\n        }\r\n        else {\r\n            console.log(\"Error of unknown type\", error);\r\n        }\r\n    }\r\n}\r\n"],"names":[],"version":3,"file":"index.e61d0915.js.map"}